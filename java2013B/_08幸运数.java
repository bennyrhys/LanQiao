package java2013B;

import java.util.Scanner;

/**
 * @Author bennyrhys
 * @Date 2020-07-04 17:06
 * 问题描述
 * 幸运数是波兰数学家乌拉姆命名的。它采用与生成素数类似的“筛法”生成
 *
 * 。
 * 首先从1开始写出自然数1,2,3,4,5,6,....
 *
 * 1 就是第一个幸运数。
 *
 * 我们从2这个数开始。把所有序号能被2整除的项删除，变为：
 *
 * 1 _ 3 _ 5 _ 7 _ 9 ....
 *
 * 把它们缩紧，重新记序，为：
 *
 * 1 3 5 7 9 .... 。这时，3为第2个幸运数，然后把所有能被3整除的序号位置的数删去。注意，是序号位置，不是那个数本身能否被3整除!! 删除的应该是5，11, 17, ...
 *
 * 此时7为第3个幸运数，然后再删去序号位置能被7整除的(19,39,...)
 *
 * 最后剩下的序列类似：
 *
 * 1, 3, 7, 9, 13, 15, 21, 25, 31, 33, 37, 43, 49, 51, 63, 67, 69, 73, 75, 79, ...
 *
 * 输入格式
 * 输入两个正整数m n, 用空格分开 (m < n < 1000*1000)
 * 输出格式
 * 程序输出 位于m和n之间的幸运数的个数（不包含m和n）。
 * 样例输入1
 * 1 20
 * 样例输出1
 * 5
 * 样例输入2
 * 30 69
 * 样例输出2
 * 8
 *
 * 思路：
 * n>m,并由于处理的数值范围大于n所以，声明数组不能直接初始化时为节省空间就直接减半（会使数值范围变小，只能一轮计算）
 */
public class _08幸运数 {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int m = scanner.nextInt();
        int n = scanner.nextInt();
        int[] a = new int[n]; // 存储数据的数组

//        初始化（先做一轮删偶数的处理）
        for (int i = 0; i < n; i++) {
            a[i] = i * 2 + 1;
        }

//        找到幸运数并删除（下标）倍数
        int l = 1; // 幸运数下标
        while (true) {
            int p = l + 1; // 数字向前移动的坑位 （1 3 5，第一个幸运数为1移动成1 3 需要l+1=2个坑位）
//            前移替换数据
            for (int i = l+1; i < n; i++) { // 从幸运数下一位开始筛选
                if ((i+1) % a[l] == 0) { // 坐标倍数+1 使初始值为1开始
                }else {
                    a[p] = a[i];
                    p++;
                }
//               优化 放弃后面无意义的操作
                if (a[i] > n) break;
            }

//           检测：输出幸运数
//            for (int i = 0; i < n; i++) {
//                System.out.print(a[i] + " ");
//            }
//            System.out.println();
            l++;

            if (a[l] >= n ) {
                break;
            }
        }
        
//        计数mn区间幸运数个数
        int ans = 0;
        for (int i = 0; i < n; i++) {
            if (a[i] >=  n) break;
            if (a[i] > m) ans++;
            if (a[i]>=a[i+1]) break; // 不优化这里oj判错
        }
        System.out.println(ans);
    }
}
